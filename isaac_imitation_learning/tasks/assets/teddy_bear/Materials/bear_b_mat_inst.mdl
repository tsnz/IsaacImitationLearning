mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using OmniUe4Function import *;
using OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material bear_b_mat_inst(
	float Normal_Adjust = 1.0,
	float UV_Tile = 1.0,
	uniform texture_2d NormalMap = texture_2d("./Textures/bear_low_Bear02_Normal.png",::tex::gamma_linear)
	[[sampler_normal()]],
	float Contrast = 0.0,
	uniform texture_2d Albedo = texture_2d("./Textures/bear_low_Bear02_BaseColor.png",::tex::gamma_srgb)
	[[sampler_color()]],
	float Albedo_Brightness = 1.0,
	float Desaturation_Amount = 0.0,
	uniform texture_2d OccRoughMetal = texture_2d("./Textures/bear_low_Bear02_OcclusionRoughnessMetallic.png",::tex::gamma_linear)
	[[sampler_masks()]],
	float Metallic_Adjust = 1.0,
	float SpecInt = 0.5,
	float Rough_Adjust = 3.0,
	float Occ_Brightness = 1.0 [[anno::unused()]])
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float2 Local0 = (CustomizedUV0_mdl * UV_Tile);
	float4 Local1 = ::unpack_normal_map(tex::lookup_float4(NormalMap,float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat));
	float Local2 = (Normal_Adjust * Local1.x);
	float Local3 = (Local1.y * Normal_Adjust);

	float3 Normal_mdl = float3(float2(Local2,Local3).x,float2(Local2,Local3).y,Local1.z);

	float Local4 = (0.0 - Contrast);
	float Local5 = (Contrast + 1.0);
	float4 Local6 = tex::lookup_float4(Albedo,float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local7 = (float3(Local6.x,Local6.y,Local6.z) * Albedo_Brightness);
	float Local8 = math::dot(Local7, float3(0.3,0.59,0.11));
	float3 Local9 = math::lerp(Local7,float3(Local8,Local8,Local8),Desaturation_Amount);
	float3 Local10 = math::lerp(float3(float2(Local4,Local4).x,float2(Local4,Local4).y,Local4),float3(Local5,Local5,Local5),Local9);
	float3 Local11 = math::min(math::max(Local10,float3(0.0,0.0,0.0)),float3(1.0,1.0,1.0));
	float4 Local12 = tex::lookup_float4(OccRoughMetal,float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local13 = (Local12.z * Metallic_Adjust);
	float Local14 = (Local12.y * Rough_Adjust);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local11;
	float Metallic_mdl = Local13;
	float Specular_mdl = SpecInt;
	float Roughness_mdl = Local14;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
